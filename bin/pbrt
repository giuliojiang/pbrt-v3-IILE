#!/usr/bin/env node

var async = require("async");
const { spawn } = require('child_process');
const fs = require('fs');
var path = require("path");

var log_dir = "/tmp/pbrt";

// Utilities ------------------------------------------------------------------

var argv = process.argv;

var argv_get = function(idx) {
    var real_idx = idx + 2;
    if (real_idx < argv.length) {
        return argv[real_idx];
    } else {
        return null;
    }
};

var array_get_last = function(arr) {
    if (!arr || arr.length == 0) {
        return null;
    }

    var last_index = arr.length - 1;
    return arr[last_index];
};

var array_replace_last = function(arr, new_item) {
    if (!arr || arr.length == 0) {
        return;
    }

    var last_index = arr.length - 1;
    arr[last_index] = new_item;
};

// Callback(exit_code, exit_signal)
var simple_exec = function(cmd, cmd_args, callback, no_output) {
    console.info("Spawn command ["+ cmd +"] with args ["+ cmd_args+"]");
    var proc = spawn(cmd, cmd_args);
    if (!no_output) {
        proc.stdout.on("data", function(data) {
            process.stdout.write(data.toString());
        });
        proc.stderr.on("data", function(data) {
            process.stderr.write(data.toString());
        });
    }
    proc.on("close", function(code, signal) {
        console.info("Process ["+ cmd +"] exited ["+ code +"] ["+ signal +"]");
        callback(code, signal);
        return;
    });

    process.on('SIGINT', function() {
        console.log("Caught interrupt signal");
        proc.kill();
        process.exit();
    });
};

// Read command line arguments

var input_scene = argv_get(0);
var output_file = argv_get(1);

// Check if there is first argument
if (!input_scene) {
    console.info("Usage: pbrt <input.pbrt> <output>");
    process.exit();
}

// Check extension

var input_scene_split = input_scene.split(".");

if (array_get_last(input_scene_split) != "pbrt") {
    console.info("Argument 0 should be a .pbrt file");
    process.exit();
}

// Generate output file name if not exists

if (!output_file) {
    array_replace_last(input_scene_split, "png");
    output_file = input_scene_split.join(".");
    console.info("No output file specified. Using ["+ output_file +"]");
} else {
    console.info("Output file: ["+ output_file +"]");
}

async.waterfall([

    (callback) => {
        // Delete old logging directory
        simple_exec("rm", ["-rf", log_dir], (code, signal) => {
            if (code == 0) {
                callback();
                return;
            } else {
                callback("Could not remove old logging directory");
                return;
            }
        });
    },

    (callback) => {
        // Create logging directory
        simple_exec("mkdir", [log_dir], (code, signal) => {
            if (code == 0) {
                callback();
                return;
            } else {
                callback("Could not create logging directory");
                return;
            }
        });
    },

    (callback) => {
        // Run pbrt
        simple_exec('/home/gj/git/pbrt-v3-IISPT-build/pbrt',
                    [input_scene, "--outfile", output_file, "--logdir", log_dir],
                    (code, signal) => {
            callback();
            return;
        });
    },

    (callback) => {
        // Find log files
        fs.readdir(log_dir, (err, files) => {
            if (err) {
                callback(err);
                return;
            } else {
                for (var i = 0; i < files.length; i++) {
                    var f_name = files[i];
                    if (f_name.indexOf("INFO") > -1) {
                        callback(null, f_name);
                        return;
                    }
                }
                callback("No INFO log file found");
                return;
            }
        });
    },

    (log_file_path, callback) => {
        // Open log file with NANO
        var log_file_full_path = path.join(log_dir, log_file_path);
        console.info("nano -c " + log_file_full_path);
        callback();
    }

], (err) => {
    if (err) {
        console.info("Error: " + err);
    }
    process.exit();
});
