#!/usr/bin/env node

var async = require("async");
const { spawn } = require('child_process');
const fs = require('fs');
var path = require("path");
var chalk = require("chalk");

var log_dir = "/tmp/pbrt";
var out_dir = "out";

var PBRT_EXEC_PATH = '/home/gj/git/pbrt-v3-IISPT-build/pbrt';

// Utilities ------------------------------------------------------------------

var argv = process.argv;

var argv_get = function(idx) {
    var real_idx = idx + 2;
    if (real_idx < argv.length) {
        return argv[real_idx];
    } else {
        return null;
    }
};

var argv_length = function() {
    return argv.length - 2;
};

var array_get_last = function(arr) {
    if (!arr || arr.length == 0) {
        return null;
    }

    var last_index = arr.length - 1;
    return arr[last_index];
};

var array_replace_last = function(arr, new_item) {
    if (!arr || arr.length == 0) {
        return;
    }

    var last_index = arr.length - 1;
    arr[last_index] = new_item;
};

// Callback(exit_code, exit_signal)
var simple_exec = function(cmd, cmd_args, callback, no_output) {
    console.info("Spawn command ["+ cmd +"] with args ["+ cmd_args+"]");
    var proc = spawn(cmd, cmd_args);
    if (!no_output) {
        proc.stdout.on("data", function(data) {
            process.stdout.write(data.toString());
        });
        proc.stderr.on("data", function(data) {
            process.stderr.write(data.toString());
        });
    }
    proc.on("close", function(code, signal) {
        var msg = "Process ["+ cmd +"] exited ["+ code +"] ["+ signal +"]";
        if (code == 0 && !signal) {
            console.info(chalk.green(msg));
        } else {
            console.info(chalk.red(msg));
        }

        callback(code, signal);
        return;
    });

    process.on('SIGINT', function() {
        console.log("Caught interrupt signal");
        proc.kill();
        process.exit();
    });
};

// Display help
// Callback: ()
var display_help = function(callback) {
    simple_exec(PBRT_EXEC_PATH, ["-h"], (code, signal) => {
        callback();
    });
};

// Read command line arguments

var main = function() {
    var positional_args = [];
    var optional_args = [];

    for (var i = 0; i < argv_length(); i++) {
        var an_arg = argv_get(i);
        if (an_arg == "-h") {
            display_help(() => {
                process.exit();
            });
            return;
        } else if (an_arg.startsWith("--")) {
            optional_args.push(an_arg);
        } else {
            positional_args.push(an_arg);
        }
    };

    var input_scene = null;
    if (positional_args.length >= 1) {
        input_scene = positional_args[0];
    }
    var output_file = null;
    if (positional_args.length >= 2) {
        output_file = positional_args[1];
    }

    // Check if there is first argument
    if (!input_scene) {
        console.info("Usage: pbrt <input.pbrt> <output> [options...]");
        process.exit();
    }

    // Check extension

    var input_scene_split = input_scene.split(".");

    if (array_get_last(input_scene_split) != "pbrt") {
        console.info("Argument 0 should be a .pbrt file");
        process.exit();
    }

    // Generate output file name if not exists

    if (!output_file) {
        array_replace_last(input_scene_split, "png");
        output_file = input_scene_split.join(".");
        console.info("No output file specified. Using ["+ output_file +"]");
    } else {
        console.info("Output file: ["+ output_file +"]");
    }

    async.waterfall([

        (callback) => {
            // Delete old logging directory
            simple_exec("rm", ["-rf", log_dir], (code, signal) => {
                if (code == 0) {
                    callback();
                    return;
                } else {
                    callback("Could not remove old logging directory");
                    return;
                }
            });
        },



        (callback) => {
            // Create logging directory
            simple_exec("mkdir", [log_dir], (code, signal) => {
                if (code == 0) {
                    callback();
                    return;
                } else {
                    callback("Could not create logging directory");
                    return;
                }
            });
        },

        (callback) => {
            // Check if out directory exists
            fs.access(out_dir, fs.constants.F_OK, (err) => {
                if (err) {
                    // Doesn't exist
                    callback(null, false);
                    return;
                } else {
                    callback(null, true);
                    return;
                }
            });
        },

        (directory_exists, callback) => {
            if (!directory_exists) {
                // Create out directory
                simple_exec("mkdir", [out_dir], (code, signal) => {
                    if (code == 0) {
                        callback();
                        return;
                    } else {
                        callback("Could not create out directory");
                        return;
                    }
                });
            } else {
                callback();
                return;
            }
        },

        (callback) => {
            // Run pbrt

            var final_args = [input_scene, "--outfile", output_file, "--logdir", log_dir];
            for (var i = 0; i < optional_args.length; i++) {
                final_args.push(optional_args[i]);
            }

            simple_exec(PBRT_EXEC_PATH,
                        final_args,
                        (code, signal) => {
                callback();
                return;
            });
        },

        (callback) => {
            // Find log files
            fs.readdir(log_dir, (err, files) => {
                if (err) {
                    callback(err);
                    return;
                } else {
                    for (var i = 0; i < files.length; i++) {
                        var f_name = files[i];
                        if (f_name.indexOf("INFO") > -1) {
                            callback(null, f_name);
                            return;
                        }
                    }
                    callback("No INFO log file found");
                    return;
                }
            });
        },

        (log_file_path, callback) => {
            // Open log file with NANO
            var log_file_full_path = path.join(log_dir, log_file_path);
            console.info("nano -c " + log_file_full_path);
            callback();
        }

    ], (err) => {
        if (err) {
            console.info("Error: " + err);
        }
        process.exit();
    });

}

main();
